@page "/post/{id}"
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@using UI.ApiLibrary.Dto.Post;
@inject IPostEndpoint PostEndpoint
@inject NavigationManager NavManager

<div class="container-fluid">
    @if (Post is null)
    {
        <div class="row">
            <p>Please wait, loading...</p>  <!-- todo: skeleton loading-->
        </div>
    }
    else
    {
        if (Editable)
        {
            <EditForm Model="EditPostModel" OnValidSubmit="ExecuteEdit" class="">
                <DataAnnotationsValidator />

                <div class="form-group row">
                    <label for="Title" class="col-sm-2 col-form-label">Title: </label>
                    <div class="col-sm-10">
                        <InputText id="Title" class="form-control" @bind-Value="EditPostModel.Title" />
                        <ValidationMessage For="@(() => Post.Title)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Content" class="col-sm-2 col-form-label">Content: </label>
                    <div class="col-sm-10">
                        <InputText id="Content" class="form-control" @bind-Value="EditPostModel.Content" />
                        <ValidationMessage For="@(() => Post.Content)" />
                    </div>
                </div>
                <br />
                <div class="col-md-12 text-rigth">
                    <button type="submit" class="btn btn-outline-success">Save Changes</button>
                </div>
            </EditForm>
        }
        else
        {
            <h2>@Post.Title</h2>
            <br/>
            <p>@Post.Content</p>
            <div class="row">
                <label for="Province" class="col-sm-2 col-form-label">Created Date</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="Province">@Post.CreatedDate</p>
                </div>
            </div>
            <div class="row">
            <label for="LastModificationDate" class="col-sm-2 col-form-label">Last modified date</label>
                <div class="col-sm-10">
                <p class="form-control-plaintext" id="Date">@Post.LastModificationDate</p>
                </div>
            </div>
            <div class="row">
            <label for="AuthorEmail" class="col-sm-2 col-form-label">Author</label>
                <div class="col-sm-10">
                <p class="form-control-plaintext" id="IsActive">@Post.AuthorEmail</p>
                </div>
            </div>
            <div class="row">
                <label for="LikeNumber" class="col-sm-2 col-form-label">Likes</label>
                <div class="col-auto">
                    <p class="form-control-plaintext" id="Latitude">@Post.LikeNumber</p>
                </div>
                @if (IsUserLoggedIn)
                {
                    <div class="col-auto" title=@LikeButtonTitile>
                        <button type="button" class="btn btn-outline-primary btn-sm col-auto" disabled=@IsLikeButtonDisabled @onclick="Like">Like</button>
                    </div>
                }
             </div>
            <div class="row">
                <label for="LikeNumber" class="col-sm-2 col-form-label">Dislikes</label>
                <div class="col-auto">
                    <p class="form-control-plaintext" id="Latitude">@Post.DisLikeNumber</p>
                </div>
                @if (IsUserLoggedIn)
                {
                    <div class="col-auto" title=@DislikeButtonTitile>
                        <button type="button" class="btn btn-outline-danger btn-sm col-auto" disabled=@IsDislikeButtonDisabled @onclick="Dislike">Dislike</button>
                    </div>
                }
            </div>

            @if (IsAuthor || IsUserModerator)
            {
                <button type="button" class="btn btn-outline-primary" @onclick="Edit">Edit</button>
                <button type="button" class="btn btn-outline-danger" @onclick="Delete">Delete</button>

            }

            <br /><br />
            <h3>Comments</h3>
            @*                <EditForm Model="Comment" OnValidSubmit="ExecuteAddComment" class="">
                <DataAnnotationsValidator />

                <div class="form-group row">
                    <label for="Content" class="col-sm-2 col-form-label">Content: </label>
                    <div class="col-sm-10">
                        <InputText id="Content" class="form-control" @bind-Value="Comment.Content" />
                        <ValidationMessage For="@(() => Comment.Content)" />
                    </div>
                </div>
                <br />
                <div class="col-md-12 text-rigth">
                    <button type="submit" class="btn btn-outline-success">Add</button>
                </div>
            </EditForm>*@
            if (IsUserLoggedIn)
            {
                <div class="d-flex flex-row p-3">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png" width="40" height="40" class="rounded-circle mr-3">
                    <div class="w-100 ms-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex flex-row align-items-center"> <span class="mr-2"><strong></strong></span> <small class="c-badge">@UserEmail</small> </div> <small>@DateTime.Now</small>
                        </div>
                        <EditForm Model="Comment" OnValidSubmit="ExecuteAddComment" class="">
                        <DataAnnotationsValidator />
                            <div class="form-group row">
                                <div class="col-auto">
                                    <p class="text-justify comment-text mb-0">
                                        <InputText id="Content" class="form-control" placeholder="Enter your comment" @bind-Value="Comment.Content" />
                                        <ValidationMessage For="@(() => Comment.Content)" />
                                    </p>
                                </div>
                                <div class="col-auto">
                                <button type="submit" class="btn btn-outline-success">Add</button>
                                </div>
                            </div>
                        </EditForm>
                    @*  <div class="d-flex flex-row user-feed"> <span class="wish"><i class="fa fa-heartbeat mr-2"></i>Likes: 24</span> <span class="ml-3"><i class="fa fa-comments-o mr-2"></i>Reply</span> </div>*@
                    </div>
                </div>
            }
            <Comments CommentsList="Comments" />

        }

    }
</div>



@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private PostReadModel Post;
    private EditPostCommandDto EditPostModel = new();
    private bool Editable;
    private bool IsAuthor;
    private IEnumerable<CommentReadModel> Comments;
    private AddCommentDto Comment = new();
    private bool IsUserLoggedIn;
    private bool IsUserModerator = false;
    private string UserEmail;

    private bool IsLikeButtonDisabled = false;
    private bool IsDislikeButtonDisabled = false;
    private string LikeButtonTitile = "";
    private string DislikeButtonTitile = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Post = await PostEndpoint.Get(new Guid(Id));
            (EditPostModel.Title, EditPostModel.Content) = (Post.Title, Post.Content);

            UserEmail= (await AuthState).User.FindFirst(ClaimTypes.Name)?.Value;
            IsAuthor = await CheckIfUserIsAuthor();
            IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
            IsUserModerator = (await AuthState).User.IsInRole("moderator");

            Comments = await PostEndpoint.GetCommentsForPost(new Guid(Id));

            await SetupButtonClickability();

        }
        catch (Exception ex)
        {
            //todo
        }
    }

    private async Task SetupButtonClickability()
    {
        //if (IsUserLoggedIn)
        var hasliked = await PostEndpoint.GetReactionForUser(Post.Id);
        if (hasliked is true)
        {
            IsLikeButtonDisabled = true;
            IsDislikeButtonDisabled = false;

            (LikeButtonTitile, DislikeButtonTitile) = ("You have already liked this post", "Dislike");
        }
        else if (hasliked is false)
        {
            IsLikeButtonDisabled = false;
            IsDislikeButtonDisabled = true;
            (LikeButtonTitile, DislikeButtonTitile) = ("Like", "You have already disliked this post");
        }
        else
        {
            IsLikeButtonDisabled = false;
            IsDislikeButtonDisabled = false;

            (LikeButtonTitile, DislikeButtonTitile) = ("Like", "Dislike");
        }
    }

    private async Task<bool> CheckIfUserIsAuthor()
    {
        if (UserEmail is not null && UserEmail == Post.AuthorEmail)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void Edit() => Editable = true;

    private async Task ExecuteEdit()
    {
        //todo: add error message box
        try
        {
            await PostEndpoint.Edit(Post.Id, EditPostModel);

            Editable = false;
            (Post.Title, Post.Content, Post.LastModificationDate) = (EditPostModel.Title, EditPostModel.Content, DateTime.Now);

        }
        catch (Exception ex)
        {
            //todo errpr message
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Delete()
    {
        try
        {
            await PostEndpoint.Delete(Post.Id);
            //todo: inform about success
            NavManager.NavigateTo("/posts");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task ExecuteAddComment()
    {
        try
        {
            Comment.PostId = Post.Id;
            await PostEndpoint.AddCommentToPost(Comment);

            Comments = await PostEndpoint.GetCommentsForPost(new Guid(Id));
            Comment = new();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Like()
    {
        try
        {
            await PostEndpoint.PostReaction(Post.Id, true);

            if (IsDislikeButtonDisabled)
            {
                Post.DisLikeNumber--;
            }

            Post.LikeNumber++;
            IsLikeButtonDisabled = true;
            IsDislikeButtonDisabled = false;
            (LikeButtonTitile, DislikeButtonTitile) = ("You have already liked this post", "Dislike");
        }
        catch (Exception ex)
        {
        }
    }

    private async Task Dislike()
    {
        try
        {
            await PostEndpoint.PostReaction(Post.Id, false);

            if (IsLikeButtonDisabled)
            {
                Post.LikeNumber--;
            }

            Post.DisLikeNumber++;
            IsDislikeButtonDisabled = true;
            IsLikeButtonDisabled = false;
            (LikeButtonTitile, DislikeButtonTitile) = ("Like", "You have already disliked this post");
        }
        catch (Exception ex)
        {
            //todo: log error, display error message
        }
    }
}
