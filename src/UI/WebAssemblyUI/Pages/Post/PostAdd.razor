@page "/post/add"
@using Blazored.LocalStorage;
@using System.Text.Json;
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@using UI.ApiLibrary.Dto.Post;
@inject IPostEndpoint PostEndpoint
@inject NavigationManager NavManager
@inject IConfiguration Configuration
@inject ILocalStorageService LocalStorage
@inject NotificationService NotificationService
@attribute [Authorize]

<h3>Add your new post</h3>

<div class="container-fluid">
    <EditForm Model="Post" OnValidSubmit="ExecuteAdd" class="">
        <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="Title" class="col-sm-2 col-form-label">Title: </label>
            <div class="col-sm-10">
                <InputText id="Title" class="form-control" @bind-Value="Post.Title" />
                <ValidationMessage For="@(() => Post.Title)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="ThumbnailPhotoUrl" class="col-sm-2 col-form-label" placeholder="Leave empty when uploading own file">Thumbnail Photo Url: </label>
            <div class="col-sm-10">
                <InputText id="ThumbnailPhotoUrl" class="form-control" @bind-Value="Post.ThumbnailPhotoUrl" />
                <ValidationMessage For="@(() => Post.ThumbnailPhotoUrl)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="UploadThumbnailPhoto" class="col-sm-2 col-form-label">Upload Thumbnail Photo: </label>
            <div class="col-sm-10">
                 <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload file (image ratio should be 4x3)</RadzenText>
                    <RadzenUpload Url=@fileUploadApiUrl Error=@ThumbnailPhotoUploadedError Complete=@ThumbnailPhotoUploaded class="w-100">
                    <RadzenUploadHeader Name="Authorization" Value=@jwt />
                </RadzenUpload>
            </RadzenCard>
            </div>
        </div>
        @if (string.IsNullOrEmpty(Post.ThumbnailPhotoUrl) is false)
        {
             <div class="ratio ratio-4x3">
                <img src=@Post.ThumbnailPhotoUrl class="img-fluid" alt="Thumbnail photo" />
            </div>
        }
        <br />
        <RadzenHtmlEditor @bind-Value=@Post.Content UploadHeaders=@uploadHeaders UploadUrl=@fileUploadApiUrl style="height: 400px;" />
        <br />
        <div class="col-md-12 text-rigth">
            <button type="submit" class="btn btn-outline-success">Save Changes</button>
        </div>
    </EditForm>
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private AddPostDto Post = new();
    private string fileUploadApiUrl = "";
    private Dictionary<string, string> uploadHeaders = new();
    private string jwt = "";

    protected override async Task OnInitializedAsync()
    {
        fileUploadApiUrl = Configuration["apiGateway"] + "/upload/image";

        var isUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        if (isUserLoggedIn)
        {                
            var bearerTokenStorageKey = Configuration["bearerTokenStorageKey"];
            string token = await LocalStorage.GetItemAsync<string>(bearerTokenStorageKey);
            jwt = $"bearer {token}";
            uploadHeaders.Add("Authorization", "bearer " + token);
        }
    }

    private async Task ExecuteAdd()
    {
        try
        {
            Post.Content = Post.Content.Sanitize();
            await PostEndpoint.Add(Post);
            //todo: inform about success
            NavManager.NavigateTo("posts");

        }
        catch (Exception ex)
        {
            //todo show error message
            Console.WriteLine(ex.Message);
        }
    }

    private void ThumbnailPhotoUploaded(UploadCompleteEventArgs eventArgs)
    {
        var result = JsonSerializer.Deserialize<ImageUploadResponse>(eventArgs.RawResponse);
        Post.ThumbnailPhotoUrl = result.url;
    }

    private void ThumbnailPhotoUploadedError(UploadErrorEventArgs errorArgs)
    {
        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Image Upload Error",
            Detail = errorArgs.Message,
            Duration = 4000
        };

        NotificationService.Notify(message);
    }
}
