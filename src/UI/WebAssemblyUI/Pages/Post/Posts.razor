@page "/posts"
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@using UI.ApiLibrary.Dto.Post;
@using WebAssemblyUI.Models
@inject NavigationManager NavManager
@inject IPostEndpoint PostEndpoint

<div class="row g-3">
    <div class="col-auto">
        <h3>Posts</h3>
    </div>
    @if (IsUserLoggedIn)
    {
        <div class="col-auto ">
            <button type="button" class="btn btn-outline-success" @onclick="AddPost">
                +Add
            </button>
        </div>
    }
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByTitle">
            Order alphabetically
        </button>
    </div>
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByRating">
            Order by rating
        </button>
    </div>
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByDate">
            Newest first
        </button>
    </div>
    @if (IsUserModerator)
    {
        <div class="col-auto ">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowInactive">
                Inactive Posts
            </button>
        </div>
    }
    @if (IsUserLoggedIn)
    {
        <div class="col-auto ">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowInactiveForUser">
                My Inactive
            </button>
        </div>
        <div class="col-auto ">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowAllPosts">
                All posts
            </button>
        </div>
    }
</div>
<br />
@if (posts?.Count() == 0)
{
    <p>No posts found.</p>
}
<div class="container-fluid">
    @if (posts is null)
    {
        <div class="row">
            <p>Please wait, loading...</p>
        </div>

        <!--skeleton loader-->
        <div class="row">
            @for (int i = 0; i < 5; i++)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a>
                                    <img src="https://dummyimage.com/1200x900/000/ffffff&text=Loading" class="img-fluid" alt="Placeholder image" />
                                    <!--- <img src="@($"{api}{product.ProductImageUrl}")" class="img-fluid" alt="@product.ProductName" />    --->
                                </a>
                                <p class="my-2 text-justify placeholder-glow">
                                    <span class="placeholder col-6"></span>
                                </p>
                                <p class="mb-1 placeholder-glow">
                                    <span class="placeholder col-7"></span>
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class=col-12 placeholder-glow">
                                <p class="h5 mb-3">
                                    <span class="placeholder col-5"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var post in posts)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="@($"post/{post.Id}")">
                                    <div class="ratio ratio-4x3">
                                        @if (string.IsNullOrEmpty(post.ThumbnailPhotoUrl))
                                        {
                                            <img src="https://dummyimage.com/1200x900/000/ffffff&text=Post" class="img-fluid" alt="Placeholder image" />
                                        }
                                        else
                                        {
                                            <img src="@($"{post.ThumbnailPhotoUrl}")" class="img-fluid" alt="Thumbnail photo" />
                                        }
                                    </div>
                                </a>
                                <p class="h5 mb-2 my-2 text-justify">@post.Title</p>
                                <p class="mb-1">
                                    <strong>Author: </strong> @post.AuthorEmail
                                </p>
                                <p class="my-1 text-justify">Date: @post.CreatedDate</p>
                                <p class="mb-1"><font color="green">Likes: @post.LikeNumber</font>  | <font color="#ff4122">Dislikes: @post.DisLikeNumber</font></p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

</div>


@code {
    [Parameter]
    public string? UserEmail { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    //todo: move add button to the left
    //todo: move editform to standalone component
    private IEnumerable<PostReadModel> posts;
    private IEnumerable<PostReadModel> allPosts;
    private bool IsUserLoggedIn = false;
    private bool IsUserModerator = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await PostEndpoint.GetAll();
            allPosts = posts;

            if (UserEmail is not null)    //todo refactor
            {
                posts = posts.Where(x => x.AuthorEmail == UserEmail);
            }

            IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
            IsUserModerator = (await AuthState).User.IsInRole("moderator");

        }
        catch (Exception ex)
        {
            //todo: redirect to error page or display error message
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        IsUserModerator = (await AuthState).User.IsInRole("moderator");
        StateHasChanged();
    }

    private void AddPost()
    {
        NavManager.NavigateTo("post/add");
    }
    private void SortByTitle()
    {
        posts = posts.OrderBy(x => x.Title).ToList();
    }

    private void SortByDate()
    {
        posts = posts.OrderByDescending(x => x.CreatedDate).ToList();
    }

    private void SortByRating()
    {
        posts = posts.OrderByDescending(x => x.LikeNumber - x.DisLikeNumber).ToList();
    }

    private async Task ShowAllPosts()
    {
        posts = allPosts;
    }

    private async Task ShowInactive()
    {
        posts = await PostEndpoint.GetAll(onlyInactive: true);
    }
    private async Task ShowInactiveForUser()
    {
        posts = await PostEndpoint.GetAll(onlyInactiveForUser: true);
    }
}
