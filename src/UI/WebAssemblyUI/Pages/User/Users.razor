@page "/users"
@using UI.ApiLibrary.ApiEndpoints;
@using UI.ApiLibrary.Dto.User;
@inject IUserEndpoint UserEndpoint

<h3>Users</h3>

@if (UserList is null)
{
    <p>Loading...</p>
    //todo: skeleton loader
}
else
{
    <br />
    <small>Enter email, firstname or lastname</small>
    <EditForm Model="SearchText" OnValidSubmit="ExecuteSearch" class="">
        <div class="form-group row">
            <div class="col-auto">
                <p class="text-justify comment-text mb-0">
                    <InputText id="SearchText" class="form-control" placeholder="Enter text" @bind-Value="SearchText" />
                </p>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-outline-primary">Search</button>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-outline-secondary" onclick="@ShowAll">Show All</button>
            </div>
        </div>
    </EditForm>

    foreach (var user in UserList)
    {
        <div class="d-flex flex-row p-3">
            <a href="@($"userprofile/{user.Id}")">
                <img src="https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png" width="70" height="70" class="rounded-circle mr-3">
            </a>
            <div class="w-100 ms-2">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex flex-row align-items-center"> <span class="mr-2"><a href="@($"userprofile/{user.Id}")" style="color: black; text-decoration:none;"><h5>@user.FirstName @user.LastName </h5></a><strong>@user.EmailAddress</strong></span> </div>
                    <small>Joined: @user.CreatedDate</small>
                </div>
                @*  <div class="d-flex flex-row user-feed"> <span class="wish"><i class="fa fa-heartbeat mr-2"></i>Likes: 24</span> <span class="ml-3"><i class="fa fa-comments-o mr-2"></i>Reply</span> </div>*@
            </div>
        </div>
    }
}

@code {
    private IEnumerable<UserReadModel> UserList;
    private IEnumerable<UserReadModel> allUsers;
    private string SearchText = "";

    protected override async Task OnInitializedAsync()
    {
        UserList = await UserEndpoint.GetAll();
        allUsers = UserList;
    }

    private void ExecuteSearch()
    {
        if(string.IsNullOrEmpty(SearchText))
        {
            UserList = allUsers;
            return;
        }

        var searchedList = allUsers.Where(x => x.EmailAddress.ToUpper() == SearchText.ToUpper()
            || x.FirstName.ToUpper() == SearchText.ToUpper() || x.LastName.ToUpper() == SearchText.ToUpper());  

        UserList = searchedList;        //todo errorMessage if no users found
    }

    private void ShowAll()
    {
        UserList = allUsers;
    }
}
