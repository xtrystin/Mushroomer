@page "/userprofile/{UserId}"
@using UI.ApiLibrary.ApiEndpoints;
@using UI.ApiLibrary.Dto.Post;
@using UI.ApiLibrary.Dto.User;
@inject IUserEndpoint UserEndpoint
@inject IPostEndpoint PostEndpoint
@inject NavigationManager NavManager;


@if (User is null)
{
    <p>Loading...</p>
    // todo skeleton loader
}
else
{

    <div class="d-flex flex-row p-3">
        <img src="https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png" width="100" height="100" class="rounded-circle mr-3">
        <div class="w-100 ms-2">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex flex-row align-items-center"> <span class="mr-2"><h3>@User.FirstName @User.LastName </h3><strong>@User.EmailAddress</strong></span> <small class="c-badge"></small> </div>
                <small>Joined: @User.CreatedDate</small>
            </div>
            @if (IsDescriptionEditMode && IsUserAuthor)
            {
                <EditForm Model="User" OnValidSubmit="ChangeProfileDescription" class="">
                    <InputText id="newProfileDescription" class="form-control" @bind-Value="User.ProfileDescription" />
                    <button type="submit" class="btn btn-outline-primary" >Submit</button>
                </EditForm>
            }
            else
            {
                <div class="row">
                    <div class="col-auto">
                        <p class="text-justify comment-text mb-0">@User.ProfileDescription</p>
                    </div>
                    @if (IsUserAuthor)
                    {
                        <div class="col-auto">
                            <span class="oi oi-pencil me-2" aria-hidden="true" title="Edit description" style="cursor: pointer" @onclick="() => IsDescriptionEditMode = true"></span>
                        </div>
                    }
                </div>
            }
            
            @*  <div class="d-flex flex-row user-feed"> <span class="wish"><i class="fa fa-heartbeat mr-2"></i>Likes: 24</span> <span class="ml-3"><i class="fa fa-comments-o mr-2"></i>Reply</span> </div>*@
        </div>
    </div>
    <br />
    <div class="row g-3 d-flex justify-content-center">
        <div class="col-auto">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowPosts">
                Show user's posts
            </button>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowComments">
                Show user's comments
            </button>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-outline-secondary" @onclick="ShowFriends">
                Show user's friends
            </button>
        </div>
    </div>
    <br />
    @if (IsPostMode)
    {
        <WebAssemblyUI.Pages.Post.Posts UserEmail="@User.EmailAddress" />
    }
    else if (IsCommentMode)
    {
        <h3>User's Comments</h3>
        <UserComments CommentsList="@Comments" />
    }
    else if (IsFriendMode)
    {
        <h3>User's Friends</h3>
        @if (User.FriendsList is null || User.FriendsList.Count == 0)
        {
            <p>Friends list is empty</p>
        }
        @foreach (var friend in User.FriendsList)
        {//todo change to real photoUrl
            <div class="d-flex flex-row p-3">
                <a style="cursor:pointer;"  @onclick="() => NavigateToProfile(friend.Id)">
                <img src="https://upload.wikimedia.org/wikipedia/commons/9/99/Sample_User_Icon.png" width="60" height="60" class="rounded-circle mr-3">
                </a>
                <div class="w-100 ms-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex flex-row align-items-center"><span class="mr-2">
                            <a @onclick="() => NavigateToProfile(friend.Id)" style="cursor:pointer;"><h6>@friend.FirstName @friend.LastName </h6></a><strong>@friend.EmailAddress</strong></span>
                        </div>
                        <small>Friend since: @friend.FriendshipStartedDate</small>
                        @if (IsUserAuthor)
                        {
                            <div class="col-auto ms-4">
                                <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveFromFriends(friend.Id)">Remove from friends</button>
                            </div>
                        }
                    </div>
                    @*  <div class="d-flex flex-row user-feed"> <span class="wish"><i class="fa fa-heartbeat mr-2"></i>Likes: 24</span> <span class="ml-3"><i class="fa fa-comments-o mr-2"></i>Reply</span> </div>*@
                </div>
            </div>
        }
    }
    else
    {
        <p>Click a button to view content :)</p>
    }
}


@code {
    [Parameter]
    public string UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private UI.ApiLibrary.Dto.User.UserReadModel User;
    private IEnumerable<CommentReadModel> Comments;

    private bool IsPostMode = false;
    private bool IsCommentMode = false;
    private bool IsFriendMode = false;

    private bool IsDescriptionEditMode = false;
    private bool IsUserAuthor = false;


    protected override async Task OnInitializedAsync()
    {
        User = await UserEndpoint.Get(new Guid(UserId));
        IsUserAuthor = await CheckIfUserIsAuthor();
    }

    private async Task<bool> CheckIfUserIsAuthor()
    {
        var isUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        if (isUserLoggedIn)
        {
            var currentUserId = new Guid((await AuthState).User.FindFirst(ClaimTypes.NameIdentifier).Value);
            if (currentUserId == User.Id)
            {
                return true;
            }
        }
        
        return false;
    }

    private void ShowPosts()
    {
        (IsPostMode, IsCommentMode, IsFriendMode) = (true, false, false);
    }

    private async Task ShowComments()
    {
        Comments = await PostEndpoint.GetCommentsForUser(User.Id);
        (IsPostMode, IsCommentMode, IsFriendMode) = (false, true, false);
    }

    private void ShowFriends()
    {
        (IsPostMode, IsCommentMode, IsFriendMode) = (false, false, true);
    }

    private async Task RemoveFromFriends(Guid friendId)
    {
        await UserEndpoint.ChangeFriendship(friendId, false);
        var deletedFriend = User.FriendsList.FirstOrDefault(x => x.Id == friendId);

        User.FriendsList.Remove(deletedFriend);
    }

    private void NavigateToProfile(Guid userId)
    {
        NavManager.NavigateTo($"/redirect/userprofile/{userId}");
    }

    private async Task ChangeProfileDescription()
    {
        try
        {
            await UserEndpoint.ChangeProfileDescription(User.ProfileDescription);
            IsDescriptionEditMode = false;
        }
        catch (Exception ex)
        {
            //todo log error
        }
    }
}
