@page "/mushrooms"
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@using UI.ApiLibrary.Dto.Mushroom;
@using WebAssemblyUI.Models
@inject NavigationManager NavManager
@inject IMushroomEndpoint MushroomEndpoint

<div class="row g-3">
    <div class="col-auto">
        <h3>Mushrooms</h3>
    </div>
    @if (IsUserModerator)
    {
        <div class="col-auto ">
            <button type="button" class="btn btn-outline-success" @onclick="AddMushroom">
                +Add
            </button>
        </div>
    }
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByIsPoisonous">
            Show poisonous first
        </button>
    </div>
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByIsEdible">
            Show edible first
        </button>
    </div>
    <div class="col-auto ">
        <button type="button" class="btn btn-outline-secondary" @onclick="SortByName">
            Order by name
        </button>
    </div>
</div>
<br />
<div class="container-fluid">
    @if (mushrooms is null)
    {
        <div class="row">
            <p>Please wait, loading...</p>
        </div>

        <!--skeleton loader-->
        <div class="row">
            @for (int i = 0; i < 5; i++)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a>
                                    <img src="https://dummyimage.com/1200x900/000/ffffff&text=Loading" class="img-fluid" alt="Placeholder image" />
                                    <!--- <img src="@($"{api}{product.ProductImageUrl}")" class="img-fluid" alt="@product.ProductName" />    --->
                                </a>
                                <p class="my-2 text-justify placeholder-glow">
                                    <span class="placeholder col-6"></span>
                                </p>
                                <p class="mb-1 placeholder-glow">
                                    <span class="placeholder col-7"></span>
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class=col-12 placeholder-glow">
                                <p class="h5 mb-3">
                                    <span class="placeholder col-5"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
              @foreach (var mushroom in mushrooms)
            {
                <div class="col-xl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="@($"/mushroom/{mushroom.Id}")">
                                    @if (string.IsNullOrEmpty(mushroom.PhotoUrl))
                                    {
                                        <img src="https://dummyimage.com/1200x900/000/ffffff&text=Mushroom" class="img-fluid" alt="Placeholder image" />
                                    }
                                    else
                                    {
                                        <img src="@($"{mushroom.PhotoUrl}")" class="img-fluid" width="1200" height="900" alt="@mushroom.Name" />
                                    }
                                    
                                </a>
                                <p class="h5 mb-2 my-2 text-justify">Name: @mushroom.Name</p>
                                <p class="my-1 text-justify">Poisonous: @mushroom.IsPoisonous</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    //todo: move add button to the left
    //todo: move editform to standalone component
    private List<Mushroom> mushrooms;
    private bool IsUserModerator = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            mushrooms = await MushroomEndpoint.GetAll();
            IsUserModerator = (await AuthState).User.IsInRole("moderator");
        }
        catch (Exception ex)
        {
            //todo: redirect to error page
        }
    }

    private void AddMushroom()
    {
        NavManager.NavigateTo("mushroom/add");
    }

    private void SortByIsPoisonous()
    {
        mushrooms = mushrooms.OrderByDescending(x => x.IsPoisonous).ToList();
    }    
    
    private void SortByIsEdible()
    {
        mushrooms = mushrooms.OrderBy(x => x.IsPoisonous).ToList();
    }

    private void SortByName()
    {
        mushrooms = mushrooms.OrderBy(x => x.Name).ToList();
    }
}
