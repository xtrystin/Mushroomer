@page "/warnings/add"
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@inject IWarningsEndpoint WarningsEndpoint
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "moderator, experienced")]

<h3>Warning Add</h3>

<div class="container-fluid">
    <EditForm Model="Warning" OnValidSubmit="ExecuteAdd" class="">
            <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="Title" class="col-sm-2 col-form-label">Title: </label>
            <div class="col-sm-10">
                <InputText id="Title" class="form-control" @bind-Value="Warning.Title" />
                <ValidationMessage For="@(() => Warning.Title)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Description" class="col-sm-2 col-form-label">Description: </label>
            <div class="col-sm-10">
                <InputText id="Description" class="form-control" @bind-Value="Warning.Description" />
                <ValidationMessage For="@(() => Warning.Description)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="MushroomName" class="col-sm-2 col-form-label">MushroomName: </label>
            <div class="col-sm-10">
                <InputText id="MushroomName" class="form-control" @bind-Value="Warning.MushroomName" />
                <ValidationMessage For="@(() => Warning.MushroomName)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Province" class="col-sm-2 col-form-label">Province: </label>
            <div class="col-sm-10">
                <InputText id="Province" class="form-control" @bind-Value="Warning.Province" />
                <ValidationMessage For="@(() => Warning.Province)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Date" class="col-sm-2 col-form-label">Date: </label>
            <div class="col-sm-10">
                <InputDate id="Date" class="form-control" @bind-Value="Warning.Date" />
                <ValidationMessage For="@(() => Warning.Date)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="IsActive" class="col-sm-2 col-form-label">IsActive: </label>
            <div class="col-sm-10">
                <InputCheckbox id="IsActive" class="form-check-input" type="checkbox" @bind-Value="Warning.IsActive" />
                <ValidationMessage For="@(() => Warning.IsActive)" />
            </div>
        </div>
        <div id="map" style="height:500px;width:100%;"></div>

        <div class="form-group row">
            <label for="Latitude" class="col-sm-2 col-form-label">Latitude: </label>
            <div class="col-sm-10">
                <InputNumber id="Latitude" class="form-control" @bind-Value="Warning.Latitude" />
                <ValidationMessage For="@(() => Warning.Latitude)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Longitude" class="col-sm-2 col-form-label">Longitude: </label>
            <div class="col-sm-10">
                <InputNumber id="Longitude" class="form-control" @bind-Value="Warning.Longitude" />
                <ValidationMessage For="@(() => Warning.Longitude)" />
            </div>
        </div>
        <br />
        <div class="col-md-12 text-rigth">
            <button type="submit" class="btn btn-outline-success">Save Changes</button>
        </div>
    </EditForm>
</div>>
@code {
    private WarningDto Warning = new WarningDto();

    private async Task ExecuteAdd()
    {
        Console.WriteLine(Warning.Latitude);
        try
        {
            await WarningsEndpoint.Add(Warning);
            //todo: inform about success
            NavManager.NavigateTo("warnings");

        }
        catch (Exception ex)
        {
            //todo show error message
            Console.WriteLine(ex.Message);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("googleMapSelect", null); 
        }
    }
}
