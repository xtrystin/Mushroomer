@page "/locations/{id}"
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@inject IWarningsEndpoint WarningsEndpoint
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IWarningsEndpoint WarningEndpoint;
@inject NotificationService NotificationService

<div class="container-fluid">
    @if (Warning is null)
    {
        <div class="row">
            <p>Please wait, loading...</p>  <!-- todo: skeleton loading-->
        </div>
    }
    else
    {
        if (Editable)
        {
            <EditForm Model="Warning" OnValidSubmit="ExecuteEdit" class="">
                <DataAnnotationsValidator />

                <div class="form-group row">
                    <label for="Title" class="col-sm-2 col-form-label">Title: </label>
                    <div class="col-sm-10">
                        <InputText id="Title" class="form-control" @bind-Value="Warning.Title" />
                        <ValidationMessage For="@(() => Warning.Title)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Description" class="col-sm-2 col-form-label">Description: </label>
                    <div class="col-sm-10">
                        <InputText id="Description" class="form-control" @bind-Value="Warning.Description" />
                        <ValidationMessage For="@(() => Warning.Description)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="MushroomName" class="col-sm-2 col-form-label">MushroomName: </label>
                    <div class="col-sm-10">
                        <InputText id="MushroomName" class="form-control" @bind-Value="Warning.MushroomName" />
                        <ValidationMessage For="@(() => Warning.MushroomName)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Date" class="col-sm-2 col-form-label">Date: </label>
                    <div class="col-sm-10">
                        <InputDate id="Date" class="form-control" @bind-Value="Warning.Date" />
                        <ValidationMessage For="@(() => Warning.Date)" />
                    </div>
                </div>
                <div id="map" style="height:500px;width:100%;"></div>

                <div class="form-group row">
                    <label for="Latitude" class="col-sm-2 col-form-label">Latitude: </label>
                    <div class="col-sm-10">
                        <InputNumber id="Latitude" class="form-control" @bind-Value="Warning.Latitude" />
                        <ValidationMessage For="@(() => Warning.Latitude)" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="Longitude" class="col-sm-2 col-form-label">Longitude: </label>
                    <div class="col-sm-10">
                        <InputNumber id="Longitude" class="form-control" @bind-Value="Warning.Longitude" />
                        <ValidationMessage For="@(() => Warning.Longitude)" />
                    </div>
                </div>

                <br />
                <div class="col-md-12 text-rigth">
                    <button type="submit" class="btn btn-outline-success">Save Changes</button>
                </div>
            </EditForm>
        }
        else
        {
            <h2>@Warning.Title</h2>
            <br />
            @Warning.Description
            <hr />
            <div class="row">
                <label for="MushroomName" class="col-sm-2 col-form-label">MushroomName</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="MushroomName">@Warning.MushroomName</p>
                </div>
            </div>
            <div class="row">
                <label for="Date" class="col-sm-2 col-form-label">Date</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="Date">@Warning.Date</p>
                </div>
            </div>
            <div class="row">
                <label for="AuthorEmail" class="col-sm-2 col-form-label">Author</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="IsActive">@Warning.AuthorEmail</p>
                </div>
            </div>
            <div class="form-group row">
                <label for="Approves" class="col-sm-2 col-form-label">Approves: </label>
                <div class="col-auto">
                    <p class="form-control-plaintext" id="IsActive">@Warning.ApproveNumber</p>
                </div>
                @if (IsUserLoggedIn)
                {
                    <div class="col-auto" title=@ApproveButtonTitile>
                        <button type="button" class="btn btn-outline-success btn-sm col-auto" disabled=@IsApproveButtonDisabled @onclick="Approve">Approve</button>
                    </div>
                }
            </div>
            <div class="form-group row">
                <label for="Disapproves" class="col-sm-2 col-form-label">Disapproves: </label>
                <div class="col-auto">
                    <p class="form-control-plaintext" id="IsActive">@Warning.DisapproveNumber</p>
                </div>
                @if (IsUserLoggedIn)
                {
                    <div class="col-auto" title=@DisapproveButtonTitile>
                        <button type="button" class="btn btn-outline-danger btn-sm col-auto" disabled=@IsDisApproveButtonDisabled @onclick="Disapprove">Disapprove</button>
                    </div>
                }
            </div>
            <br />
            @if (IsModalView is null or false || Editable)
            {
                <div id="map" style="height:500px;width:100%;"></div>
            }
            <div class="row">
                <label for="Latitude" class="col-sm-2 col-form-label">Latitude</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="Latitude">@Warning.Latitude</p>
                </div>
            </div>
            <div class="row">
                <label for="Longitude" class="col-sm-2 col-form-label">Longitude</label>
                <div class="col-sm-10">
                    <p class="form-control-plaintext" id="Longitude">@Warning.Longitude</p>
                </div>
            </div>
            <!--
            <div class="mb-3 row">
            <a href="@($"https://www.google.com/maps/place/{Warning.Latitude.ToString().Replace(',', '.')},{Warning.Longitude.ToString().Replace(',', '.')}")">See on the map</a>
            </div>
            -->

            <div class="row g-2">
                @if ((IsAuthor || IsUserModerator) && (IsModalView is null or false))
                {
                    <div class="col-auto ">
                        <button type="button" class="btn btn-outline-primary" @onclick="Edit">Edit</button>
                    </div>
                    <div class="col-auto ">
                        <button type="button" class="btn btn-outline-danger" @onclick="Delete">Delete</button>
                    </div>
                }
                @if (IsUserModerator)
                {
                    @if (Warning.IsActive)
                    {
                        <div class="col-auto ">
                            <button type="button" class="btn btn-outline-secondary" @onclick="ChangeIsActive">Deactivate</button>
                            <i>Location is active</i>
                        </div>
                    
                    }
                    else
                    {
                        <div class="col-auto ">
                            <button type="button" class="btn btn-outline-secondary" @onclick="ChangeIsActive">Activate</button>
                            <i>Location is not active</i>
                        </div>
                    }
                
                }
            </div>
            if (IsModalView is not null and true)
            {
                <button type="button" class="btn btn-outline-primary" @onclick='() => NavManager.NavigateTo($"locations/{Id}")'>Go to details</button>
            }
        }

    }
</div>



@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public bool? IsModalView { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private WarningDto Warning;
    private bool Editable;
    private bool IsUserLoggedIn;
    private bool wasEditable = true;

    private bool IsApproveButtonDisabled = false;
    private bool IsDisApproveButtonDisabled = false;
    private string ApproveButtonTitile = "";
    private string DisapproveButtonTitile = "";

    private bool IsUserModerator = false;
    private bool IsUserExperienced = false;
    private bool IsAuthor;
    private string UserEmail;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(1);    // when accessed via link wait for Authorization header to be added
            Warning = await WarningsEndpoint.Get(Id);
            //await JSRuntime.InvokeVoidAsync("googleMap", null);     //todo remove this

            IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
            if (IsUserLoggedIn)
            {
                string currentUserId = (await AuthState).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                await SetupButtonClickability(currentUserId);
            }

            IsUserModerator = (await AuthState).User.IsInRole("moderator");
            IsUserExperienced = (await AuthState).User.IsInRole("experienced");
            UserEmail = (await AuthState).User.FindFirst(ClaimTypes.Name)?.Value;
            IsAuthor = CheckIfUserIsAuthor();
        }
        catch (Exception ex)
        {
            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Getting Location error",
                    Detail = ex.Message,
                    Duration = 4000
                };

            NotificationService.Notify(message);
        }
    }

    // Updates IsUserLogginIn on AuthState change
    protected override async Task OnParametersSetAsync()
    {
        IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        IsUserModerator = (await AuthState).User.IsInRole("moderator");
        IsUserExperienced = (await AuthState).User.IsInRole("experienced");
        string currentUserId = (await AuthState).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        UserEmail = (await AuthState).User.FindFirst(ClaimTypes.Name)?.Value;
        IsAuthor = CheckIfUserIsAuthor();

        SetupButtonClickability(currentUserId);
        StateHasChanged();
    }

    private void Edit() => Editable = true;

    private void ExecuteEdit()
    {
        //todo: add error message box
        //todo: change id to private
        try
        {
            WarningsEndpoint.Update(Warning);
            Editable = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // Setup Google Map
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (!firstRender && (IsModalView is null or false || Editable))
            {
                if (Editable)
                {
                    if (!wasEditable)
                    {
                        wasEditable = true;
                        object[] latLon = { Warning.Latitude, Warning.Longitude, true, 10 };
                        await JSRuntime.InvokeVoidAsync("googleMapSelect", latLon);
                    }
                }
                else
                {
                    if (wasEditable)
                    {
                        wasEditable = false;
                        object[] latLon = { Warning.Latitude, Warning.Longitude };
                        await JSRuntime.InvokeVoidAsync("googleMapShow", latLon);
                    }
                }
            }
        }
        catch (Exception)
        {
            
        }

    }

    private bool CheckIfUserIsAuthor()
    {
        if (UserEmail is not null && UserEmail == Warning.AuthorEmail)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task SetupButtonClickability(string userId)
    {
        //if (IsUserLoggedIn)
        await Task.Delay(1);        // wait for authesrvice thread to fetch user token before sending below request
        var hasliked = await WarningsEndpoint.GetReactionForUser(Warning.Id, new Guid(userId));
        if (hasliked is true)
        {
            IsApproveButtonDisabled = true;
            IsDisApproveButtonDisabled = false;

            (ApproveButtonTitile, DisapproveButtonTitile) = ("You have already approved this warning", "Disapprove");
        }
        else if (hasliked is false)
        {
            IsApproveButtonDisabled = false;
            IsDisApproveButtonDisabled = true;
            (ApproveButtonTitile, DisapproveButtonTitile) = ("Approve", "You have already disapproved this warning");
        }
        else
        {
            IsApproveButtonDisabled = false;
            IsDisApproveButtonDisabled = false;

            (ApproveButtonTitile, DisapproveButtonTitile) = ("Approve", "Disapprove");
        }
        StateHasChanged();  // necessary when invoked by OnParametersSetAsync
    }

    private async Task Delete()
    {
        try
        {
            await WarningsEndpoint.Delete(Warning.Id);
            //todo: inform about success
            NavManager.NavigateTo("locations");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Approve()
    {
        try
        {
            await WarningEndpoint.PostReaction(Warning.Id, true);

            if (IsDisApproveButtonDisabled)
            {
                Warning.DisapproveNumber--;
            }

            Warning.ApproveNumber++;
            IsApproveButtonDisabled = true;
            IsDisApproveButtonDisabled = false;
            (ApproveButtonTitile, DisapproveButtonTitile) = ("You have already approved this warning", "Disapprove");
        }
        catch (Exception ex)
        {
        }
    }

    private async Task Disapprove()
    {
        try
        {
            await WarningsEndpoint.PostReaction(Warning.Id, false);

            if (IsApproveButtonDisabled)
            {
                Warning.ApproveNumber--;
            }

            Warning.DisapproveNumber++;
            IsDisApproveButtonDisabled = true;
            IsApproveButtonDisabled = false;
            (ApproveButtonTitile, DisapproveButtonTitile) = ("Approve", "You have already disapproved this warning");
        }
        catch (Exception ex)
        {
            //todo: log error, display error message
        }
    }


    private async Task ChangeIsActive()
    {
        try
        {
            await WarningEndpoint.ChangeStatus(Warning.Id, !Warning.IsActive);
            Warning.IsActive = !Warning.IsActive;
        }
        catch (Exception ex)
        {
            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Change location status error",
                    Detail = ex.Message,
                    Duration = 4000
                };

            NotificationService.Notify(message);
        }
    }
}
