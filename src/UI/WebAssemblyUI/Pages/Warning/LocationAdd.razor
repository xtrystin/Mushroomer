@page "/locations/add"
@using Blazored.LocalStorage;
@using UI.ApiLibrary.ApiEndpoints
@using UI.ApiLibrary.Dto
@inject IWarningsEndpoint WarningsEndpoint
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NotificationService NotificationService
@inject ILocalStorageService LocalStorage
@attribute [Authorize]

<h3>Location Add</h3>

<div class="container-fluid">
    <EditForm Model="Warning" OnValidSubmit="ExecuteAdd" class="">
            <DataAnnotationsValidator />

        <div class="form-group row">
            <label for="Title" class="col-sm-2 col-form-label">Title: </label>
            <div class="col-sm-10">
                <InputText id="Title" class="form-control" @bind-Value="Warning.Title" />
                <ValidationMessage For="@(() => Warning.Title)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Description" class="col-sm-2 col-form-label">Description: </label>
            <div class="col-sm-10">
                <InputText id="Description" class="form-control" @bind-Value="Warning.Description" />
                <ValidationMessage For="@(() => Warning.Description)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="MushroomName" class="col-sm-2 col-form-label">MushroomName: </label>
            <div class="col-sm-10">
                <InputText id="MushroomName" class="form-control" @bind-Value="Warning.MushroomName" />
                <ValidationMessage For="@(() => Warning.MushroomName)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Date" class="col-sm-2 col-form-label">Date: </label>
            <div class="col-sm-10">
                <InputDate id="Date" class="form-control" @bind-Value="Warning.Date" />
                <ValidationMessage For="@(() => Warning.Date)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="ThumbnailPhotoUrl" class="col-sm-2 col-form-label" placeholder="Leave empty when uploading own file">Thumbnail Photo Url: </label>
            <div class="col-sm-10">
                <InputText id="ThumbnailPhotoUrl" class="form-control" @bind-Value="Warning.ThumbnailPhotoUrl" />
                <ValidationMessage For="@(() => Warning.ThumbnailPhotoUrl)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="UploadThumbnailPhoto" class="col-sm-2 col-form-label">Upload Thumbnail Photo: </label>
            <div class="col-sm-10">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload file (image ratio should be 4x3)</RadzenText>
                    <RadzenUpload Url=@fileUploadApiUrl Error=@ThumbnailPhotoUploadedError Complete=@ThumbnailPhotoUploaded class="w-100">
                        <RadzenUploadHeader Name="Authorization" Value=@jwt />
                    </RadzenUpload>
                </RadzenCard>
            </div>
        </div>
        @if (string.IsNullOrEmpty(Warning.ThumbnailPhotoUrl) is false)
        {
            <div class="ratio ratio-4x3">
                <img src=@Warning.ThumbnailPhotoUrl class="img-fluid" alt="Thumbnail photo" />
            </div>
        }
        <br />
        <span>Mark position</span>
        <RadzenGoogleMap ApiKey=@(Configuration["googleMap"]) @ref=map style="height: 45rem" Options=@(new Dictionary<string, object> { { "disableDoubleClickZoom", true } })
                         Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 42.6977, Lng = 23.3219 })
                         MapClick=@OnMapClick Data=@MapMarkersToShow>
        </RadzenGoogleMap>

        <div class="form-group row">
            <label for="Latitude" class="col-sm-2 col-form-label">Latitude: </label>
            <div class="col-sm-10">
                <InputNumber id="Latitude" class="form-control" @bind-Value="Warning.Latitude" />
                <ValidationMessage For="@(() => Warning.Latitude)" />
            </div>
        </div>
        <div class="form-group row">
            <label for="Longitude" class="col-sm-2 col-form-label">Longitude: </label>
            <div class="col-sm-10">
                <InputNumber id="Longitude" class="form-control" @bind-Value="Warning.Longitude" />
                <ValidationMessage For="@(() => Warning.Longitude)" />
            </div>
        </div>
        <br />
        <div class="col-md-12 text-rigth">
            <button type="submit" class="btn btn-outline-success">Save Changes</button>
        </div>
    </EditForm>
</div>
@code {
    private WarningDto Warning = new WarningDto();

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string fileUploadApiUrl = "";
    private Dictionary<string, string> uploadHeaders = new();
    private string jwt = "";

    private RadzenGoogleMap map;
    private int zoom = 3;
    private List<RadzenGoogleMapMarker> MapMarkersToShow = new();
    private RadzenGoogleMapMarker MapMarker = new();

    protected override async Task OnInitializedAsync()
    {
        var isUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        fileUploadApiUrl = Configuration["apiGateway"] + "/upload/image";
        if (isUserLoggedIn)
        {
            var bearerTokenStorageKey = Configuration["bearerTokenStorageKey"];
            string token = await LocalStorage.GetItemAsync<string>(bearerTokenStorageKey);
            jwt = $"bearer {token}";
            uploadHeaders.Add("Authorization", "bearer " + token);
        }

        MapMarkersToShow = new List<RadzenGoogleMapMarker> { MapMarker };
    }

    private async Task ExecuteAdd()
    {
        Console.WriteLine(Warning.Latitude);
        try
        {
            await WarningsEndpoint.Add(Warning);
            //todo: inform about success
            NavManager.NavigateTo("locations");

        }
        catch (Exception ex)
        {
            //todo show error message
            Console.WriteLine(ex.Message);
        }
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Warning.Latitude = args.Position.Lat;
        Warning.Longitude = args.Position.Lng;

        MapMarker.Position.Lat = args.Position.Lat;
        MapMarker.Position.Lng = args.Position.Lng;
    }


    private void ThumbnailPhotoUploaded(UploadCompleteEventArgs eventArgs)
    {
        var result = JsonSerializer.Deserialize<ImageUploadResponse>(eventArgs.RawResponse);
        Warning.ThumbnailPhotoUrl = result.url;
    }

    private void ThumbnailPhotoUploadedError(UploadErrorEventArgs errorArgs)
    {
        var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Image Upload Error",
                Detail = errorArgs.Message,
                Duration = 4000
            };

        NotificationService.Notify(message);
    }
}
