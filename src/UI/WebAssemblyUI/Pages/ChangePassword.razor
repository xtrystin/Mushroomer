@page "/changePassword"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager
@attribute [Authorize]

<h3>ChangePassword</h3>
@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
<EditForm Model="model" OnValidSubmit="ExecuteChangePassword" class="">

    <div class="row g-3 mt-1">
        <div class="col-lg-auto col-sm-3 col-2">
            <label for="currentPassword" class="visually-hidden">Current Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.CurrentPassword" placeholder="Current Password" />
        </div>

        <div class="col-lg-auto col-sm-3 col-2">
            <label for="newPassword" class="visually-hidden">New Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.NewPassword" placeholder="New Password" />
        </div>

        <div class="col-auto">
            <button type="submit" class="btn alert-success mb-3">Submit</button>
        </div>
    </div>
</EditForm>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private UserChangePasswordModel model = new();

    private bool showAuthenticationError = false;
    private string errorMessage = "";


    private async Task ExecuteChangePassword()
    {
        try
        {
            model.UserId = (await AuthState).User.FindFirst(ClaimTypes.NameIdentifier).Value;

            await AuthService.ChangePassword(model);
            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            //errorMessage = ex.Message;    //todo
            errorMessage = "Incorrent current password or new password does not password policy: 1 big and small letter, min 1 digit, min 1 special character, min. 8 characters in total";
            showAuthenticationError = true;
        }
    }
}
