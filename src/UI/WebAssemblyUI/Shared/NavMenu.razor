@inject NavigationManager NavManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">WebAssemblyUI</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="warnings">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Warnings
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="mushrooms">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Mushrooms
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="posts">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Posts
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Users
            </NavLink>
        </div>
        @if (firstOpening)
        {
            // if created to prevent error:  Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100] Unhandled exception rendering component: Cannot wait on monitors on this runtime. System.PlatformNotSupportedException: Cannot wait on monitors on this runtime.
        }
        else if (IsUserLoggedIn().Result)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="() => NavigateToProfile(UserId)" style="cursor: pointer;">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> My Profile
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    //private bool IsUserLoggedIn;
    private string UserId;
    private bool firstOpening = true;

    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        //IsUserLoggedIn = (await AuthState).User.Identity.IsAuthenticated;
        UserId = (await AuthState).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        firstOpening = false;

    }

    private async Task<bool> IsUserLoggedIn()
    {
        UserId = (await AuthState).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return (await AuthState).User.Identity.IsAuthenticated;
    }

    private void NavigateToProfile(string userId)
    {
        NavManager.NavigateTo($"redirect/userprofile/{userId}");
    }
}
