// <auto-generated />
using System;
using Infrastructure.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(WarningDbContext))]
    [Migration("20231021203417_AddAuthorToWarnings")]
    partial class AddAuthorToWarnings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EmailAddress");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Warning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("MushroomName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MushroomName");

                    b.Property<string>("Province")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Province");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Warning", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.WarningUserReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Approve")
                        .HasColumnType("boolean")
                        .HasColumnName("Approve");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid>("WarningId")
                        .HasColumnType("uuid")
                        .HasColumnName("WarningId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WarningId");

                    b.ToTable("WarningUserReaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Warning", b =>
                {
                    b.HasOne("Domain.Entity.User", "Author")
                        .WithMany("_warnings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Entity.WarningUserReaction", b =>
                {
                    b.HasOne("Domain.Entity.User", "User")
                        .WithMany("_warningReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Warning", "Warning")
                        .WithMany("_reactions")
                        .HasForeignKey("WarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warning");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Navigation("_warningReactions");

                    b.Navigation("_warnings");
                });

            modelBuilder.Entity("Domain.Entity.Warning", b =>
                {
                    b.Navigation("_reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
